name: 'Terraform Plan Summary'
description: "Summarizes a json terraform plan"
inputs:
  json-tf-plan:
    description: Path to json terraform plan file
    required: true
outputs:
  no-op-count:
    description: Count of resources with no change
  update-count:
    description: Count of resources to update
  delete-count:
    description: Count of resource to delete
runs:
  using: 'composite'
  steps:
    - run: env
      shell: bash
    - uses: actions/github-script@v6
      with:
        script: |
          const plan = require("${{ inputs.json-tf-plan }}");

          let actionMap = {}
          for (resource of plan.resource_changes) {
            const actions = resource.change.actions.join(",")
            if (!actionMap.hasOwnProperty(actions)) {
              actionMap[actions] = []
            }
            actionMap[resource.change.actions.join(",")].push(resource.address)
          }
          //console.log(actionMap);
          function capitalize(s) {
            return s[0].toUpperCase() + s.substring(1);
          }

          let summaryCounts = ""
          let summaryTable = [[{data: 'Action', header: true}, {data: 'Count', header: true}]]
          for (const [action, resources] of Object.entries(actionMap)) {
            let pluralString = "s"
            if (resources.length == 1) {
              pluralString = ""
            }
            let emoji = ""
            if (action.includes('update')) {
              emoji = '‚¨ÜÔ∏è'
            } else if (action.includes('create')) {
              emoji = 'üÜï'
            } else if (action.includes('delete')) {
              emoji = '‚ùå'
            } else if (action.includes('no-op')) {
              emoji = 'üü∞'
            }
            const row = [`${emoji} ${capitalize(action)}`,` ${resources.length} resource${pluralString}`];
            summaryTable.push(row);
          }
          console.log(summaryTable)

          let summary = core.summary
            .addHeading('Terraform Plan')
            .addTable(summaryTable)
            .addRaw('<details><summary>Resources</summary>')
          for (const [action, resources] of Object.entries(actionMap)) {
            if (action != "no-op") {
              summary.addHeading(capitalize(action), 3);
              summary.addList(resources);
            }
          }
          summary.addRaw('</details>')
            .write()
